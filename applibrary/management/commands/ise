import requests
from django.core.management.base import BaseCommand
from applibrary.models import Book, Author, Category, Transactions
from datetime import datetime
import random

class Command(BaseCommand):
    help = 'Fetches book data from a free API and adds it to the database'

    def handle(self, *args, **kwargs):
        Transactions .objects.all().delete()
        Book.objects.all().delete()
        Author.objects.all().delete()
        Category.objects.all().delete()
        # URL of the free API endpoint
        api_url = 'https://api.example.com/books'

        # Make a GET request to the API
        response = requests.get(api_url)

        # Check if request was successful
        if response.status_code == 200:
            # Extract book information from API response
            data = response.json()

            # Iterate over the books, limiting to 100
            for i, book_data in enumerate(data[:100], 1):
                # Extract book data
                title = book_data.get('title')
                author_name = book_data.get('author')
                category_name = book_data.get('category')
                published_date_str = book_data.get('published_date')

                # Generate a random value for stock
                stock = random.randint(1, 6)

                # Get or create author and category objects
                author, _ = Author.objects.get_or_create(name=author_name)
                category, _ = Category.objects.get_or_create(name=category_name)

                # Convert published date string to datetime object
                published_date = datetime.strptime(published_date_str, '%Y-%m-%d')

                # Create book object
                book = Book.objects.create(
                    name=title,
                    author=author,
                    category=category,
                    book_published_date=published_date,
                    stock=stock,
                )

                self.stdout.write(self.style.SUCCESS(f"Added book {i}: {book}"))

        else:
            self.stdout.write(self.style.ERROR("Failed to fetch data from the API."))
